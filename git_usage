git branch -vv : 현재 브랜치 확인
git checkout -b <이름> : 새 브랜치 생성 후 이동
git checkout <이름> : 브랜치로 이동
*여기서, 만일 수정된 파일이 있으면 저장하지 않으면 다른 브랜치로 이동이 안됨.
git status : 현재 파일 수정 등 상태.
*Changes not staged for commit : 수정해놓고 스테이징은 안된 파일들
*Untracked files : 프로그램 실행하면 자동으로 생기는 파일이라 굳이 트래킹하지 않는 파일들
git add -u : 수정한 모든 파일을 스테이징함 (untracked file 빼고)
git commit -a : 스테이징된 모든 파일을 commit함.
*그러고 나면 뭐가 수정됐는지 코멘트를 적으라고 뜸. 적어주고 :wq 하면 됨.

[jihkim@cms SKFlatAnalyzer]$ git remote -vv
origin	https://github.com/Hooooon12/SKFlatAnalyzer (fetch)
origin	https://github.com/Hooooon12/SKFlatAnalyzer (push)
upstream	https://github.com/CMSSNU/SKFlatAnalyzer (fetch)
upstream	https://github.com/CMSSNU/SKFlatAnalyzer (push)

git push -u origin SKFlat_JH

하면 origin에 있는 SKFlat_JH branch를 github로 올리게 됨.

=============================repository에 새로 생긴 branch 가져오기=====================================


git branch -a 를 하면, 현재 branch 뿐만 아니라 remote에 있는 branch까지 모두 보여준다.

[jihkim@cms SKFlatAnalyzer]$ git branch             
* SKFlat_JH
  v949cand2_2__SMP
[jihkim@cms SKFlatAnalyzer]$ git branch -a  
* SKFlat_JH
  v949cand2_2__SMP
  remotes/origin/HEAD -> origin/master
  remotes/origin/Run2Legacy_v1
  remotes/origin/SKFlat_JH
  remotes/origin/master
  remotes/origin/v946p1_2
  remotes/origin/v946p1_3
  remotes/origin/v949cand2_1
  remotes/origin/v949cand2_2
  remotes/upstream/Run2Legacy_v1
  remotes/upstream/master
  remotes/upstream/v946p1_2
  remotes/upstream/v946p1_3
  remotes/upstream/v949cand2_1
  remotes/upstream/v949cand2_2
  remotes/upstream/v949cand2_2__SMP

remote는 local에 저장돼 있는, repository를 가리키는 pointer 같은 것임.

[jihkim@cms SKFlatAnalyzer]$ git remote -v
origin	https://github.com/Hooooon12/SKFlatAnalyzer (fetch)
origin	https://github.com/Hooooon12/SKFlatAnalyzer (push)
upstream	https://github.com/CMSSNU/SKFlatAnalyzer (fetch)
upstream	https://github.com/CMSSNU/SKFlatAnalyzer (push)

이제 git fetch --all 를 하면, remote에 모든 정보를 새로 다 받아옴.
새로생긴 branch도 가져옴. 다만 없어진 branch를 똑같이 지워주진 않음.

이제 git checkout -b <원하는 이름> <원하는 remote>/<원하는 branch> 하면
remote에 가서 branch를 실제로 가져옴.

[jihkim@cms SKFlatAnalyzer]$ git checkout -b Run2Legacy_SMP upstream/Run2Legacy_SMP


===========================repository에 로컬 branch 전송하기=================================================

git push <보낼 remote> <push할 branch 이름>:<보낼 branch 이름> 하면 remote에 대응하는 repository로 보냄.

[jihkim@cms SKFlatAnalyzer]$ git push origin Run2Legacy_SMP


===========================repository에 있는 branch를 현재 branch에 merge하기================================================

git merge <remote>/<remote branch 이름>

[jihkim@tamsa1 SKFlatAnalyzer]$ git merge upstream/master


===========================branch 삭제하기================================================================
git branch --delete <브랜치 이름>
해당 내용을 remote로 push해야 github의 브랜치도 삭제된다.

그 명령어는 git push origin :<브랜치 이름> 이다.

===========================remote에 새로운 repository 추가하기==================================================
git remote add <repo 이름(주로 upstream or origin)> <git주소>

이제 로컬 브랜치에 가져오려면 먼저 fetch를 하고
git fetch <repo 이름>

[jihkim@tamsa1 Powheg]$ git fetch upstream

브랜치를 생성하면 됨
git checkout -b <브랜치 이름> <repo이름>/<remote 브랜치 이름>

[jihkim@tamsa1 Powheg]$ git checkout -b master upstream/master
